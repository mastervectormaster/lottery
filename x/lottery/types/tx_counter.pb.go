// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lottery/tx_counter.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxCounter struct {
	Counter github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=counter,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"counter"`
}

func (m *TxCounter) Reset()         { *m = TxCounter{} }
func (m *TxCounter) String() string { return proto.CompactTextString(m) }
func (*TxCounter) ProtoMessage()    {}
func (*TxCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6b39af76b137e4, []int{0}
}
func (m *TxCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxCounter.Merge(m, src)
}
func (m *TxCounter) XXX_Size() int {
	return m.Size()
}
func (m *TxCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_TxCounter.DiscardUnknown(m)
}

var xxx_messageInfo_TxCounter proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TxCounter)(nil), "mastervectormaster.lottery.lottery.TxCounter")
}

func init() { proto.RegisterFile("lottery/tx_counter.proto", fileDescriptor_fa6b39af76b137e4) }

var fileDescriptor_fa6b39af76b137e4 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xc8, 0xc9, 0x2f, 0x29,
	0x49, 0x2d, 0xaa, 0xd4, 0x2f, 0xa9, 0x88, 0x4f, 0xce, 0x2f, 0xcd, 0x2b, 0x49, 0x2d, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0xca, 0x4d, 0x2c, 0x2e, 0x49, 0x2d, 0x2a, 0x4b, 0x4d, 0x2e,
	0xc9, 0x2f, 0x82, 0xb0, 0xf5, 0xa0, 0x8a, 0x61, 0xb4, 0x94, 0x48, 0x7a, 0x7e, 0x7a, 0x3e, 0x58,
	0xb9, 0x3e, 0x88, 0x05, 0xd1, 0xa9, 0x14, 0xca, 0xc5, 0x19, 0x52, 0xe1, 0x0c, 0x31, 0x4c, 0xc8,
	0x83, 0x8b, 0x1d, 0x6a, 0xae, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xa7, 0x93, 0xde, 0x89, 0x7b, 0xf2,
	0x0c, 0xb7, 0xee, 0xc9, 0xab, 0xa5, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea,
	0x27, 0xe7, 0x17, 0xe7, 0xe6, 0x17, 0x43, 0x29, 0xdd, 0xe2, 0x94, 0x6c, 0xfd, 0x92, 0xca, 0x82,
	0xd4, 0x62, 0x3d, 0xcf, 0xbc, 0x92, 0x20, 0x98, 0x76, 0x27, 0xff, 0x13, 0x8f, 0xe4, 0x18, 0x2f,
	0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18,
	0x6e, 0x3c, 0x96, 0x63, 0x88, 0x32, 0x45, 0x32, 0x0a, 0xd3, 0xd5, 0xfa, 0x30, 0x2f, 0x56, 0xc0,
	0x59, 0x60, 0xd3, 0x93, 0xd8, 0xc0, 0xce, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2a, 0xd5,
	0x4a, 0xc5, 0x04, 0x01, 0x00, 0x00,
}

func (m *TxCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Counter.Size()
		i -= size
		if _, err := m.Counter.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTxCounter(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTxCounter(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxCounter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Counter.Size()
	n += 1 + l + sovTxCounter(uint64(l))
	return n
}

func sovTxCounter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxCounter(x uint64) (n int) {
	return sovTxCounter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxCounter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCounter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxCounter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCounter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Counter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxCounter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxCounter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxCounter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxCounter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxCounter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxCounter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxCounter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxCounter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxCounter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxCounter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxCounter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxCounter = fmt.Errorf("proto: unexpected end of group")
)
